<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 19e8122137a1d42ed60f17fe2c0c2b69b0b2d16b Maintainer: jhdxr Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<sect1 xml:id="migration71.incompatible">
 <title>不向后兼容的变更</title>

 <sect2 xml:id="migration71.incompatible.too-few-arguments-exception">
  <title>当传递参数过少时将抛出错误</title>

  <para>
   在过去如果我们调用一个用户定义的函数时，提供的参数不足，那么将会产生警告（warning）。现在，这个警告被提升为错误异常（Error
   exception）。这个变更仅对用户定义的函数生效，并不包含内置函数。例如：
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function test($param){}
test();
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Fatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in %s on line %d and exactly 1 expected in %s:%d
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.incompatible.forbid-dynamic-calls-to-scope-introspection-functions">
  <title>禁止动态调用作用域内的内省（introspection）函数</title>

  <para>
   禁止动态调用（<literal>$func()</literal> 或 <literal>array_map('extract', ...)</literal>
   的形式等）某些函数。这些函数会检查或修改另一个作用域，并呈现出不明确且不可靠的行为。函数如下：
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <function>assert</function>——字符串作为第一个参数
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>compact</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>extract</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_get_args</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_get_arg</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_num_args</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>get_defined_vars</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>mb_parse_str</function>——使用一个参数
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>parse_str</function>——使用一个参数
    </simpara>
   </listitem>
  </itemizedlist>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
(function () {
    $func = 'func_num_args';
    $func();
})();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Warning: Cannot call func_num_args() dynamically in %s on line %d
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.incompatible.invalid-class-names">
  <title>无效的 class、interface 和 trait 名称</title>

  <para>
   下列名称不能用于 class、interfaces 或 traits 名：
  </para>

  <itemizedlist>
   <listitem>
    <simpara><type>void</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>iterable</type></simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration71.incompatible.numerical-strings-scientific-notation">
  <title>数字字符串转换现在遵循科学记数法</title>

  <para>
   现在在数字字符串上执行整数运算和转换会考虑科学计数法。这还包括 <literal>(int)</literal>
   类型转换操作以及以下函数：<function>intval</function>（基数为
   10）、<function>settype</function>、<function>decbin</function>、<function>decoct</function> 和 <function>dechex</function>。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.fixes-to-mt_rand-algorithm">
  <title>修复 <function>mt_rand</function> 算法</title>

  <para>
   <function>mt_rand</function> 现在默认使用修复版本的梅森旋转算法。如果依赖于 <function>mt_rand</function>
   的确定输出，则可以使用 <constant>MT_RAND_PHP</constant> 作为 <function>mt_srand</function> 的可选第二个参数，以保留旧的（不正确的）实现。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.rand-srand-aliases">
  <title>
   <function>rand</function> 是 <function>mt_rand</function> 的别名以及
   <function>srand</function> 是 <function>mt_srand</function> 的别名
  </title>

  <para>
   <function>rand</function> 和 <function>srand</function> 现已成为 <function>mt_rand</function> 和 <function>mt_srand</function>
   的别名。这意味着以下函数已经更改：<function>rand</function>、<function>shuffle</function>、<function>str_shuffle</function>
   和 <function>array_rand</function>。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.delete-control-character-in-identifiers">
  <title>禁止在标识符中使用 ASCII 删除控制字符</title>

  <para>
   ASCII 删除控制字符（<literal>0x7F</literal>）不能用于未加引号的标识符中。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.error_log-syslog">
  <title>
   <parameter>error_log</parameter> 更改为 <literal>syslog</literal> 值
  </title>

  <para>
   如果 <parameter>error_log</parameter> ini 设置为 <literal>syslog</literal>，PHP 错误等级会映射到 syslog
   错误级别。这在错误日志中带来了更好的区分，与之前相反，之前所有的错误只记录了错误级别。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.dont-call-destructors">
  <title>在不完整的对象上不再调用析构方法</title>

  <para>
   对于在执行构造方法时抛出异常的对象，现在析构方法绝不会被调用。在先前的版本中，这个行为取决于对象是否在构造方法以外的地方呗引用（例如一个错误堆栈回溯）
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.call_user_func-with-ref-args">
  <title>
   <function>call_user_func</function> 不再支持对传址的函数的调用
  </title>

  <para>
   <function>call_user_func</function> 现在在调用一个以引用作为参数的函数时将始终产生一个警告。先前这取决于这个调用行为是否完全符合条件。
  </para>
  <para>
   此外，<function>call_user_func</function> 和
   <function>call_user_func_array</function> 在这种情况下将不再中断函数调用。现在会出现包含“expected reference”的警告信息，但函数调用将正常进行。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.empty-string-index-operator">
  <title>
   字符串不再支持空索引操作符
  </title>

  <para>
   对字符串使用一个空索引操作符（例如<literal>$str[] = $x</literal>）将会抛出一个致命错误，而不是静默地将其转为一个数组。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.removed-ini-directives">
  <title>ini 配置项移除</title>

  <para>
   下列 ini 配置项已经被移除：
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <parameter>session.entropy_file</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.entropy_length</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.hash_function</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.hash_bits_per_character</parameter>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration71.incompatible.array-order">
  <title>
   在引用赋值期间自动创建元素时的数组排序已更改
  </title>

  <para>
   当通过引用赋值自动创建这些元素时，数组中元素的顺序就会发生变化。例如：
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
?>
]]>
   </programlisting>
   &example.outputs.70;
   <screen>
<![CDATA[
array(2) {
  ["a"]=>
  &int(1)
  ["b"]=>
  &int(1)
}
]]>
   </screen>
   &example.outputs.71;
   <screen>
<![CDATA[
array(2) {
  ["b"]=>
  &int(1)
  ["a"]=>
  &int(1)
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.incompatible.sort-order">
  <title>相等元素的排序顺序</title>
  <para>
   内部排序算法已得到改进，这可能会导致元素比较相等的排序顺序与以前不同。
  </para>
  <note>
   <para>
    不要依赖比较相等的元素的顺序；它可能随时改变。
   </para>
  </note>
 </sect2>

 <sect2 xml:id="migration71.incompatible.e-recoverable">
  <title>E_RECOVERABLE 错误的错误消息</title>
  <para>
   E_RECOVERABLE 错误的错误消息已从“可捕获的致命错误”更改为“可恢复的致命错误”。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.unserialize">
  <title>unserialize() 的 $options 参数</title>
  <para>
   <function>unserialize</function> 的 $options 参数的 <literal>allowed_classes</literal>
   元素现在是严格类型，也就是说，如果指定了 <type>array</type> 或 <type>bool</type> 以外的任何内容，则
   unserialize() 返回 &false; 并发出 <constant>E_WARNING</constant>。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.datetime-microseconds">
  <title>DateTime 构造方法包含微秒</title>
  <para>
   <classname>DateTime</classname> 和 <classname>DateTimeImmutable</classname>
   现在构造当前时间时正确地包含微秒，无论是明确指定的还是使用相对字符串（例如 <literal>"first day of next
   month"</literal>）。这意味着两个新创建的实例的原生比较现在更有可能返回 &false; 而不是 &true;：
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
new DateTime() == new DateTime();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.fatal-errors-to-error-exceptions">
  <title>核心错误转换为 <classname>Error</classname> 异常</title>
  <para>
   在 Date 扩展中，<classname>DateTime</classname> 或 <classname>DatePeriod</classname>
   类的无效序列化数据或者序列化数据的时区初始化失败，现在将从 <methodname>__wakeup</methodname>
   或 <methodname>__set_state</methodname> 方法抛出 <classname>Error</classname> 异常，而不是导致致命错误。
  </para>

  <para>
   在 DBA 扩展中，如果键没有完全包含两个元素，数据修改函数（例如 <function>dba_insert</function>）现在将抛出
   <classname>Error</classname> 异常，而不是触发可捕获的致命错误。
  </para>

  <para>
   在 DOM 扩展中，无效的模式或 RelaxNG 验证上下文现在将引发 <classname>Error</classname>
   异常，而不是导致致命错误。同样，尝试注册不继承适宜基类的节点类、尝试读取无效属性或写入只读属性，现在也将引发
   <classname>Error</classname> 异常。
  </para>

  <para>
   在 IMAP 扩展中，长度超过 16385 字节的电子邮件地址将引发 <classname>Error</classname> 异常，而不是导致致命错误。
  </para>

  <para>
   在 Intl 扩展中，在调用父级方法之前，在继承 <classname>Collator</classname> 的类中调用父级构造方法失败，现在将抛出
   <classname>Error</classname> 而不是可恢复的致命错误。此外克隆 <classname>Transliterator</classname>
   对象时，如果无法克隆内部 transliterator，将抛出 <classname>Error</classname> 异常，而不会导致致命错误。
  </para>

  <para>
   在 LDAP 扩展中，向 <function>ldap_batch_modify</function> 提供未知的修改类型现在将引发 <classname>Error</classname> 异常，而不是导致致命错误。
  </para>

  <para>
   在 mbstring 扩展中，如果提供了无效的 PHP 表达式并且使用了“e”选项，<function>mb_ereg</function> 和
   <function>mb_eregi</function> 函数现在将引发 <classname>ParseError</classname> 异常。
  </para>

  <para>
   在 Mcrypt 扩展中，如果 mcrypt 无法初始化，<function>mcrypt_encrypt</function> 和 <function>mcrypt_decrypt</function>
   现在将抛出 <classname>Error</classname> 异常，而不是导致致命错误。
  </para>

  <para>
   在 mysqli 扩展中，尝试读取无效属性或写入只读属性现在将引发 <classname>Error</classname> 异常，而不是导致致命错误。
  </para>

  <para>
   在反射扩展中，检索 reflection 对象或检索对象属性失败现在将引发 <classname>Error</classname> 异常，而不是导致致命错误。
  </para>

  <para>
   在 Session 扩展中，当调用必须生成会话 ID 的函数时，自定义会话处理程序不返回字符串格式的会话
   ID 现在将引发 <classname>Error</classname> 异常，而不是导致致命错误。
  </para>

  <para>
   在 SimpleXML 扩展中，创建未命名或重复的属性现在将引发 <classname>Error</classname> 异常，而不是导致致命错误。
  </para>

  <para>
   在 SPL 扩展中，尝试克隆 <classname>SplDirectory</classname> 对象现在将引发 <classname>Error</classname>
   异常，而不是导致致命错误。同理，在迭代对象时调用 <methodname>ArrayIterator::append</methodname> 现在也会引发 <classname>Error</classname> 异常。
  </para>

  <para>
   在标准扩展中，将字符串作为其第一个参数时，<function>assert</function> 函数现在将抛出 <classname>ParseError</classname> 异常，而不是在 PHP
   代码无效时导致可捕获的致命错误。同理，在类作用域之外调用 <function>forward_static_call</function> 现在将引发 <classname>Error</classname> 异常。
  </para>

  <para>
   在 Tidy 扩展中，手动创建 <classname>tidyNode</classname> 现在将抛出 <classname>Error</classname> 异常，而不是导致致命错误。
  </para>

  <para>
   在 WDDX 扩展中，序列化时的循环引用现在将引发 <classname>Error</classname> 异常，而不是导致致命错误。
  </para>

  <para>
   在 XML-RPC 扩展中，序列化时的循环引用现在将抛出 <classname>Error</classname> 异常实例，而不是导致致命错误。
  </para>

  <para>
   在 Zip 扩展中，如果 glob 支持无效，<methodname>ZipArchive::addGlob</methodname> 方法现在将引发 <classname>Error</classname> 异常，而不是导致致命错误。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.lexical-names">
  <title>词法绑定变量不能重用名字</title>

  <para>
   通过 <literal>use</literal> 构造绑定到 <link linkend="functions.anonymous">closure</link>
   的变量不能使用与任何 &link.superglobals;、<varname>$this</varname> 或任何参数相同的名称。例如，所有这些函数定义都会导致致命错误：
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$f = function () use ($_SERVER) {};
$f = function () use ($this) {};
$f = function ($param) use ($param) {};
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.long2ip">
  <title>long2ip() 参数类型更改</title>
  <para>
   <function>long2ip</function> 现在接受 <type>int</type> 而不是 <type>string</type>。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.json">
  <title>JSON 编/解码</title>
  <para>
   <parameter>serialize_precision</parameter> ini 设置现在控制编码 <type>float</type> 时的序列化精度。
  </para>
  <para>
   解码空键（empty key）现在会产生空属性，而不是 <literal>_empty_</literal> 作为属性名称。
   <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(json_decode(json_encode(['' => 1])));
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
object(stdClass)#1 (1) {
  [""]=>
  int(1)
}
]]>
   </screen>
  </informalexample>
  </para>
  <para>
   当向 <function>json_encode</function> 提供 <constant>JSON_UNESCAPED_UNICODE</constant> flag 时，现在转义序列 U+2028 和 U+2029。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.mbstring">
  <title>
   更改 <function>mb_ereg</function> 和 <function>mb_eregi</function> 参数语义
  </title>
  <para>
   如果没有匹配到内容，<function>mb_ereg</function> 和 <function>mb_eregi</function>
   函数（<parameter>regs</parameter>）的第三个参数现在将设置为空数组。以前，不会修改该参数。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.openssl">
  <title>放弃对 sslv2 stream 的支持</title>
  <para>
   sslv2 stream 现已在 OpenSSL 中删除。
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.typed-returns-compile-time">
  <title>在编译时禁止 "return;" 用于类型化返回</title>
  <para>
   在声明返回类型的函数中，没有参数的 return 语句现在触发 <constant>E_COMPILE_ERROR</constant>（除非返回类型声明为
   <type>void</type>），即使永远不会到达 return 语句。
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
