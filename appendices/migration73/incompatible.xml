<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: avenger Status: partial -->
<!-- CREDITS: mowangjuanzi -->
<sect1 xml:id="migration73.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>不向下兼容的变更</title>

 <sect2 xml:id="migration73.incompatible.core">
  <title>PHP 核心</title>

  <sect3 xml:id="migration73.incompatible.core.heredoc-nowdoc">
   <title>Heredoc/Nowdoc 结束标签解释</title>

   <para>
    由于引入了<link linkend="migration73.new-features.core.heredoc">灵活的 heredoc/nowdoc
    语法</link>，正文中包含结束标签的文档字符串可能会导致语法错误或解释发生变化。例如在：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$str = <<<FOO
abcdefg
   FOO
FOO;
?>
]]>
     </programlisting>
    </informalexample>
    <literal>FOO</literal> 缩进在出现之前没有任何特殊含义。现在将解释为 heredoc 字符串的结尾，并且之后的 <literal>FOO;</literal>
    将导致语法错误。这个问题始终可以通过选择一个不在字符串内容中出现的结束标签来解决。
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.continue-targeting-switch">
   <title>Switch 中使用 Continue 会发出警告</title>

   <para>
    <literal>switch</literal> 控制流结构使用 <literal>continue</literal> 语句现在将生成警告。在 PHP 中，<literal>continue</literal> 语句相当于
    <literal>break</literal>，而在其它语言中它们的行为等同于 <literal>continue 2</literal>。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
while ($foo) {
    switch ($bar) {
      case "baz":
         continue;
         // Warning: "continue" targeting switch is equivalent to
         //          "break". Did you mean to use "continue 2"?
   }
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.arrayaccess">
   <title>Strict Interpretation of Integer String Keys on ArrayAccess</title>

   <para>
    Array accesses of type <literal>$obj["123"]</literal>, where
    <literal>$obj</literal> implements <classname>ArrayAccess</classname> and
    <literal>"123"</literal> is an integer <type>string</type> literal will no
    longer result in an implicit conversion to integer, i.e.,
    <literal>$obj->offsetGet("123")</literal> will be called instead of
    <literal>$obj->offsetGet(123)</literal>. This matches existing behavior for
    non-literals. The behavior of arrays is not affected in any way, they
    continue to implicitly convert integral string keys to integers.
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.static-properties">
   <title>Static Properties no longer separated by Reference Assignment</title>

   <para>
    In PHP, static properties are shared between inheriting classes, unless the
    static property is explicitly overridden in a child class. However, due to an
    implementation artifact it was possible to separate the static properties by
    assigning a reference. This loophole has been fixed.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class Test {
    public static $x = 0;
}
class Test2 extends Test { }

Test2::$x = &$x;
$x = 1;

var_dump(Test::$x, Test2::$x);
// Previously: int(0), int(1)
// Now:        int(1), int(1)
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.reference-unwrapping">
   <title>References returned by Array and Property Accesses are immediately unwrapped</title>

   <para>
    References returned by array and property accesses are now unwrapped as part
    of the access. This means that it is no longer possible to modify the
    reference between the access and the use of the accessed value:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$arr = [1];
$ref =& $arr[0];
var_dump($arr[0] + ($arr[0] = 2));
// Previously: int(4), Now: int(3)
?>
]]>
     </programlisting>
    </informalexample>
    This makes the behavior of references and non-references consistent. Please
    note that reading and writing a value inside a single expression remains
    undefined behavior and may change again in the future.
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.traversable-unpacking">
   <title>Argument Unpacking of Traversables with non-Integer Keys no longer supported</title>

   <para>
    Argument unpacking stopped working with <classname>Traversable</classname>s
    with non-integer keys. The following code worked in PHP 5.6-7.2 by accident.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(...$args) {
    var_dump($args);
}
function gen() {
    yield 1.23 => 123;
}
foo(...gen());
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.misc">
   <title>杂项</title>

   <para>
    <filename>ext_skel</filename> 应用程序已重新设计，添加了一些新选项并删除了一些旧选项。现在是用 PHP 编写的，没有外部依赖项。
   </para>

   <para>
    已弃用对 BeOS 的支持。
   </para>

   <para>
    由于在 <literal>EH_THROW</literal> 模式下将警告自动转换为异常而引发的异常（例如某些 <classname>DateTime</classname>
    异常）将不再填充 <function>error_get_last</function> 状态。因此，它们现在的工作方式与手动引发异常相同。
   </para>

   <para>
    <classname>TypeError</classname> 现在将错误类型分别报告为 <literal>int</literal> 和
    <literal>bool</literal>，而不是 <literal>integer</literal> 和 <literal>boolean</literal>。
   </para>

   <para>
    未定义变量传递给 <function>compact</function>，现在将报告为 notice。
   </para>

   <para>
    <function>getimagesize</function> 和相关函数现在将 BMP 图像的 mime 类型报告为 <literal>image/bmp</literal> 而不是
    <literal>image/x-ms-bmp</literal>，因为前者已经在 IANA 注册（参阅 <link xlink:href="&url.rfc;7903">RFC 7903</link>）。
   </para>

   <para>
    <function>stream_socket_get_name</function> 现在将返回由中括号括起来的 IPv6 地址。例如，将返回
    <literal>"[::1]:1337"</literal> 而不是 <literal>"::1:1337"</literal>。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration73.incompatible.bc">
  <title>BCMath 任意精度数学</title>

  <para>
   <link linkend="ref.bc">BCMath 函数</link>抛出的所有警告现在都使用 PHP 的错误处理。以前，一些警告直接写入了 stderr。
  </para>

  <para>
   <function>bcmul</function> and <function>bcpow</function> now return numbers
   with the requested scale. Formerly, the returned numbers may have omitted
   trailing decimal zeroes.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.imap">
  <title>IMAP、POP3 和 NNTP</title>

  <para>
   默认情况下禁用 <command>rsh</command>/<command>ssh</command> 登录。使用 <link linkend="ini.imap.enable-insecure-rsh">imap.enable_insecure_rsh</link>
   启用它们。请注意，将邮箱名称传递给 <command>rsh</command>/<command>ssh</command> 命令之前，IMAP 库不会对其进行过滤，因此在启用
   <command>rsh</command>/<command>ssh</command> 的情况下将不受信任的数据传递给该函数是不安全的。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.mbstring">
  <title>多字节字符串</title>

  <para>
    由于增加了对命名捕获的支持，使用命名捕获的 <literal>mb_ereg_*()</literal> 模式的行为会有所不同。特别是命名捕获将成为匹配的一部分，并且
    <function>mb_ereg_replace</function> 将说明额外语法。有关详细信息，请参阅<link
    linkend="migration73.new-features.mbstring.named-captures">命名捕获</link>。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.mysqli">
  <title>MySQL 扩展提升</title>

  <para>
   预处理语句现在可以正确报告带有小数位数说明符的 <literal>DATETIME</literal>、<literal>TIME</literal> 和 <literal>TIMESTAMP</literal>
   列的带小数的秒（例如，使用微秒时为 <literal>TIMESTAMP(6)</literal>）。以前，返回值中简单地省略了秒的小数部分。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.pdo-mysql">
  <title>MySQL 函数（PDO_MYSQL）</title>

  <para>
   预处理语句现在可以正确报告带有小数位数说明符的 <literal>DATETIME</literal>、<literal>TIME</literal> 和 <literal>TIMESTAMP</literal>
   列的带小数的秒（例如，使用微秒时为 <literal>TIMESTAMP(6)</literal>）。以前，返回值中简单地省略了秒的小数部分。请注意，这仅影响关闭模拟预处理时
   <link linkend="ref.pdo-mysql">PDO_MYSQL</link> 的使用（例如使用原生预处理功能）。使用具有
   <constant>PDO::ATTR_EMULATE_PREPARES</constant>=&true;（默认值）的连接的语句不受已修复错误的影响，并且已经从引擎获取了带正确小数的秒值。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.reflection">
  <title>反射</title>

  <para>
   <link linkend="book.reflection">反射</link>导出为字符串，现在分别使用
   <literal>int</literal> 和 <literal>bool</literal> 而不是
   <literal>integer</literal> 和 <literal>boolean</literal>。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.spl">
  <title>PHP 标准库（SPL）</title>

  <para>
   如果 <link linkend="book.spl">SPL</link> 自动加载器抛出异常，则不会执行后面的自动加载器。以前，所有自动加载器都会执行，并且会将异常链接起来。
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.simplexml">
  <title>SimpleXML</title>

  <para>
   涉及 <link linkend="book.simplexml">SimpleXML</link> 对象的数学运算现在会将文本视为 <type>int</type>
   或 <type>float</type>，以更合适者为准。以前，值会被无条件视为 <type>int</type>。
  </para>
 </sect2>

  <sect2 xml:id="migration73.incompatible.cookie-decode">
  <title>传入 cookie</title>

  <para>
   从 PHP 7.3.23 起，出于安全原因，传入 cookie 的 <emphasis>names</emphasis> 不再进行 url 解码。
  </para>
 </sect2>
 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
