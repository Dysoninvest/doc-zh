<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 68dfe9740823ed1d229e5e79b7018fe71237c665 Maintainer: Avenger Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<sect1 xml:id="migration74.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>不向后兼容的变更</title>

 <sect2 xml:id="migration74.incompatible.core">
  <title>PHP 核心中不向后兼容的变更</title>

  <sect3 xml:id="migration74.incompatible.core.non-array-access">
   <title>以数组形式访问非数组</title>

   <para>
    尝试以数组方式访问 <type>null</type>，<type>bool</type>，
    <type>int</type>，<type>float</type> 或 <type>resource</type>
    （例如 <literal>$null["key"]</literal>）将会抛出 notice 通知。
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.get-declared-classes">
   <title><function>get_declared_classes</function> 函数</title>

   <para>
    <function>get_declared_classes</function>
    函数将不再返回匿名的类，假如它们没有被实例化的话。
   </para>
  </sect3>
  
  <sect3 xml:id="migration74.incompatible.core.fn">
   <title><literal>fn</literal> 关键词</title>

   <para>
    <literal>fn</literal> 成为了保留关键词。需要特别注意，它不能再做为函数名或类名使用，但是仍然可以做为方法名和常量名存在。
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.php-tag">
   <title>文件尾部的 <literal>&lt;?php</literal> 标签</title>

   <para>
    文件尾部的 <literal>&lt;?php</literal>
    标签（不包含空行）将会被解释成 PHP 起始标记。之前，不是解释为短开始标记，后跟文字 <literal>php</literal>
    并导致语法错误（<literal>short_open_tag=1</literal>），就是解释为文字 <literal>&lt;?php</literal>
    字符串（<literal>short_open_tag=0</literal>）。
   </para>
  </sect3>

  
  <sect3 xml:id="migration74.incompatible.core.stream-wrappers">
   <title>Stream 封装协议</title>

   <para>
    在 stream 上使用 include/require 时，将使用 <constant>STREAM_OPTION_READ_BUFFER</constant> 选项调用
    <methodname>streamWrapper::stream_set_option</methodname>。编写的自定义 stream 封装协议可能需要实现
    <methodname>streamWrapper::stream_set_option</methodname> 方法以避免警告（始终返回 &false; 就足够了）。
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.serialization">
   <title>Serialization 序列化</title>

   <para>
    序列化类型 <literal>o</literal> 被移除。因为它不是由 PHP
    生成的，这可能会影响到之前项目中手动生成的序列化字符串。
   </para>
  </sect3>

  
  <sect3 xml:id="migration74.incompatible.core.password-algorithm-constants">
   <title>密码算法常量</title>

   <para>
    密码哈希算法标识符现在是可空字符串，而不再是整数。
   </para>

   <itemizedlist>
    <listitem>
     <simpara>
      <constant>PASSWORD_DEFAULT</constant> 之前是 int 1; 现在是“2y”（在 PHP 7.4.0、7.4.1、7.4.2 中是 &null;）
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_BCRYPT</constant> 之前是 int 1; 现在是 string '2y'
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2I</constant> 之前是 int 2; 现在是 string 'argon2i'
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2ID</constant> 之前是 int 3; 现在是 string 'argon2id'
     </simpara>
    </listitem>
   </itemizedlist>

   
   <para>
    应用中如果正常使用了常量 PASSWORD_DEFAULT，PASSWORD_BCRYPT，PASSWORD_ARGON2I
    和 PASSWORD_ARGON2ID 将不会受到影响。
   </para>
  </sect3>

  
  <sect3 xml:id="migration74.incompatible.core.htmlentities">
   <title><function>htmlentities</function> 函数</title>

   <para>
    <function>htmlentities</function> 如果与仅支持基本实体替换（basic entity substitution）的编码一起使用，现在将发出
    notice（而不是严格标准的 warning），在这种情况下，相当于 <function>htmlspecialchars</function>。
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.fread-fwrite">
   <title><function>fread</function> and <function>fwrite</function> 函数</title>

   <para>
    <function>fread</function> 和 <function>fwrite</function>
    在操作失败的时候会返回 &false;。之前的版本中会返回空字符串或 0。EAGAIN/EWOULDBLOCK 不视为故障。
   </para>
   <para>
    这些函数现在也会在失败时发出 NOTICE 通知，例如当试图写入一个只读文件资源时。
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration74.incompatible.bcmath">
  <title>BCMath 任意精度数学</title>

  <para>
   如果传递了例如 <literal>"32foo"</literal> 这种格式不正确的数字，BCMath 函数现在将发出警告。和以前一样，参数将解释为 0。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.curl">
  <title>CURL</title>

  <para>
   现在尝试序列化 <classname>CURLFile</classname> 类将会生成异常。之前仅会在反序列化时引发。
  </para>
  <para>
   弃用 <constant>CURLPIPE_HTTP1</constant>，并在 cURL 7.62.0 起不再支持。
  </para>
  <para>
   弃用 <function>curl_version</function> 的 <literal>$version</literal> 参数。如果传递了任何不等于默认
   <constant>CURLVERSION_NOW</constant> 的值，则会引发警告并忽略参数。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.datetime">
  <title>日期和时间</title>

  <para>
   在 <classname>DateTime</classname> 或 <classname>DateTimeImmutable</classname> 实例上调用
   <function>var_dump</function> 或类似方法将不会忘记对象上的可访问属性。
  </para>
  <para>
   <classname>DateInterval</classname> 对象的比较（使用
   <literal>==</literal>、<literal>&lt;</literal> 等）现在将生成警告并始终返回
   &false;。之前所有的 <classname>DateInterval</classname> 对象都认为相等，除非它们有属性。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.intl">
  <title>Intl</title>

  <para>
   <function>idn_to_ascii</function> 和 <function>idn_to_utf8</function> 的默认参数的值现在为
   <constant>INTL_IDNA_VARIANT_UTS46</constant>，而不是已弃用的 <constant>INTL_IDNA_VARIANT_2003</constant>。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.mysqli">
  <title>MySQLi</title>

  <para>
   内嵌服务器功能已移除。自 PHP 7.0 起就已破坏了。
  </para>
  <para>
   未记录的 <literal>mysqli::$stat</literal> 属性已移除，以支持 mysqli::stat()。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.openssl">
  <title>OpenSSL</title>

  <para>
   <function>openssl_random_pseudo_bytes</function> 函数现在将在错误情况下抛出异常，类似于 <function>random_bytes</function>。特别是，如果请求的字节数小于或等于零，则会引发
   <classname>Error</classname>；如果无法收集到足够的随机性，则会引发 <classname>Exception</classname>。如果函数不抛出异常，则 <literal>$crypto_strong</literal>
   输出参数保证始终为 &true;，因此不需要手动检查它。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.pcre">
  <title>正则表达式（Perl 兼容）</title>

  <para>
   当使用 <constant>PREG_UNMATCHED_AS_NULL</constant> 模式时，后跟不匹配的捕获组现在也将设置为 &null;（如果启用了偏移捕获，则为 <literal>[null, -1]</literal>）。这意味着 <literal>$matches</literal> 的大小将始终相同。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.pdo">
  <title>PHP 数据对象</title>

  <para>
   尝试序列化 <classname>PDO</classname> 或 <classname>PDOStatement</classname> 实例现在将生成
   <classname>Exception</classname> 而不是 <classname>PDOException</classname>，这与其它不支持序列化的内部类一致。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.reflection">
  <title>反射</title>

  <para>
   现在如果尝试对 Reflection 对象序列化将会生成异常。从未支持反射对象序列化并会引起反射对象错误。现在已明确禁止。
  </para>

  <para>
   <classname>ReflectionClassConstant</classname>、<classname>ReflectionMethod</classname> 和
   <classname>ReflectionProperty</classname> 类常量的值发生了变化。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.spl">
  <title>PHP 标准库（SPL）</title>

  <para>
   现在对 <classname>ArrayObject</classname> 实例调用 <function>get_object_vars</function>
   将始终返回 <classname>ArrayObject</classname> 本身（或子类）的属性。之前，除非指定了
   <constant>ArrayObject::STD_PROP_LIST</constant> flag，否则将返回包装后的 array/object。
  </para>
  <para>
   其它受到影响的操作有：
  </para>
  <itemizedlist>
   <listitem>
    <simpara>
     <methodname>ReflectionObject::getProperties</methodname>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>reset</function>、<function>current</function> 等等。
     改用 <interfacename>Iterator</interfacename> 方法。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     可能将对象属性作为列表处理的其它情况。比如 <function>array_walk</function>。
    </simpara>
   </listitem>
  </itemizedlist>
  <para>
   <literal>(array)</literal> 转换不受影响。它们将继续返回包装数组或 <classname>ArrayObject</classname>
   属性，具体取决于是否使用 <constant>ArrayObject::STD_PROP_LIST</constant> flag。
  </para>
  <para>
   如果传递零，<methodname>SplPriorityQueue::setExtractFlags</methodname>
   将引发异常。以前，这会在执行下个提取操作时生成可恢复的致命错误。
  </para>
  <para>
   除了 <interfacename>Serializable</interfacename> 接口之外，<classname>ArrayObject</classname>、<classname>ArrayIterator</classname>、<classname>SplDoublyLinkedList</classname>
   和 <classname>SplObjectStorage</classname> 现在还支持 <literal>__serialize()</literal> 和 <literal>__unserialize()</literal>
   机制。这意味着在旧版本上创建的序列化负荷仍然可以反序列化，但旧版本将无法理解 PHP 7.4 创建的新负荷（payloads）。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.tokenizer">
  <title>Tokenizer</title>

  <para>
   <function>token_get_all</function> 现在将为非法字符发出 <constant>T_BAD_CHARACTER</constant> token，而不是在 token stream 中留下漏洞。
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.cookie-decode">
  <title>接收到的 Cookies</title>

  <para>
   从 PHP 7.4.11 开始，为了安全考虑，接受到的 Cookie 中的 <emphasis>names</emphasis> 参数不再被
   URL 编码。
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
