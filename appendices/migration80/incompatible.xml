<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 7f4d351cb527938a04343c06a8fd4353b456c5d3 Maintainer: avenger Status: partial -->
<!-- CREDITS: mowangjuanzi -->
<sect1 xml:id="migration80.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>不向后兼容的变更</title>

 <sect2 xml:id="migration80.incompatible.core">
  <title>PHP 核心中不向后兼容的变更</title>

  <sect3 xml:id="migration80.incompatible.core.string-number-comparision">
   <title>字符串与数字的比较</title>

   <para>
    数字与非数字形式的字符串之间的非严格比较现在将首先将数字转为字符串，然后比较这两个字符串。
    数字与数字形式的字符串之间的比较仍然像之前那样进行。
    请注意，这意味着 <code>0 == "not-a-number"</code> 现在将被认为是 false 。
    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>比较</entry>
        <entry>之前</entry>
        <entry>之后</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><code>0 == "0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "0.0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>0 == ""</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>42 == "   42"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>42 == "42foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <!-- RFC: https://wiki.php.net/rfc/string_to_number_comparison -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.incompatible.core.other">
   <title>其它不向后兼容的变更</title>

   <itemizedlist>
    <listitem>
     <para>
      <literal>match</literal> 现在是一个保留字。
     </para>
    </listitem>
    <listitem>
     <para>
      断言（Assertion）失败现在默认抛出异常。如果想要改回之前的行为，可以在 INI 设置中设置
      <code>assert.exception=0</code> 。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>mixed</literal> 现在是保留字，所以不能用于类，接口或者
      trait，也禁止在命名空间中使用。
     </para>
    </listitem>
    <listitem>
     <para>
      与类名相同的方法名将不再被当做构造方法。应该使用 <link linkend="object.construct">__construct()</link>
      来取代它。
     </para>
    </listitem>
    <listitem>
     <para>
      不再允许通过静态调用的方式去调用非静态方法。因此 <function>is_callable</function> 在检查一个类名与非静态方法时将返回失败（应当检查一个类的实例）。
     </para>
    </listitem>
    <listitem>
     <para>
     <code>(real)</code> 和 <code>(unset)</code> 转换已被移除。
     </para>
    </listitem>
    <listitem>
      <para>
       移除 <link linkend="ini.track-errors">track_errors</link> 执行。这意味着不能再用 <varname>php_errormsg</varname>。可以改用
       <function>error_get_last</function> 函数。
      </para>
    </listitem>
    <listitem>
     <para>
      移除定义不区分大小写的常量功能。<function>define</function> 的第三个参数可能不再为 &true;。
     </para>
    </listitem>
    <listitem>
     <para>
      移除使用 <function>__autoload</function> 函数指定自动加载器的功能。应该改用 <function>spl_autoload_register</function>。
     </para>
    </listitem>
    <listitem>
     <para>
      <parameter>errcontext</parameter> 参数将不再传递给使用 <function>set_error_handler</function> 设置的自定义错误处理程序。
     </para>
    </listitem>
    <listitem>
     <para>
      移除 <function>create_function</function>。应该改用匿名函数。
     </para>
    </listitem>
    <listitem>
     <para>
      移除 <function>each</function>。应该改用 &foreach; 或者 <classname>ArrayIterator</classname>。
     </para>
    </listitem>
    <listitem>
     <para>
      移除在方法中使用 <methodname>Closure::fromCallable</methodname> 或 <methodname>ReflectionMethod::getClosure</methodname>
      创建的匿名函数中解绑 <varname>this</varname> 的能力。
     </para>
    </listitem>
    <listitem>
     <para>
      移除了从包含 <varname>this</varname> 使用的正常闭包中解绑 <varname>this</varname> 的能力。
     </para>
    </listitem>
    <listitem>
     <para>
      移除对对象使用 <function>array_key_exists</function> 的能力。应该改用 <function>isset</function> 或 <function>property_exists</function>。
     </para>
    </listitem>
    <listitem>
     <para>
      <function>array_key_exists</function> 中 <parameter>key</parameter> 参数类型的行为已经和 <function>isset</function> 和正常数组访问一致。所有的
      key 类型现在使用通用的强制转换，数组/对象 key 会抛出 <classname>TypeError</classname>。
     </para>
    </listitem>
    <listitem>
     <para>
      任意一个数组，将数字 <replaceable>n</replaceable> 作为第一个数字 key，下一个隐式键将会是 <replaceable>n+1</replaceable>。即使
      <replaceable>n</replaceable> 为负数也是如此。
      <!-- RFC: https://wiki.php.net/rfc/negative_array_index -->
     </para>
    </listitem>
    <listitem>
     <para>
      error_reporting 默认级别现在是 <constant>E_ALL</constant>。之前排除 <constant>E_NOTICE</constant> 和 <constant>E_DEPRECATED</constant>。
     </para>
    </listitem>
    <listitem>
     <para>
      现在默认启用 <link linkend="ini.display-startup-errors">display_startup_errors</link>。
     </para>
    </listitem>
    <listitem>
     <para>
      在没有父级的类中使用 <type>parent</type> 将会导致 fatal compile-time 错误。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>@</literal> 操作将不再屏蔽 fatal 
      错误（<constant>E_ERROR</constant>、<constant>E_CORE_ERROR</constant>、<constant>E_COMPILE_ERROR</constant>、<constant>E_USER_ERROR</constant>、<constant>E_RECOVERABLE_ERROR</constant>、<constant>E_PARSE</constant>）。当使用
      <literal>@</literal> 时，接受 error_reporting 为 <literal>0</literal> 的错误处理程序，应该调整为使用位掩码检查：
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// 之前
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (error_reporting() == 0) {
        return false;
    }
    // ...
}

// 现在
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (!(error_reporting() & $err_no)) {
        return false;
    }
    // ...
}
?>
]]>
      </programlisting>
     </para>
     <para>
      此外，应注意在生产环境中不显示错误消息，这可能会导致信息泄露。确保 <code>display_errors=Off</code> 与错误记录一起使用。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>#[</literal> 不再解释为注释的开头，因为此语法现在用于注解。
      <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
     </para>
    </listitem>
    <listitem>
     <para>
      由于不兼容的方法签名（违反 LSP）导致的继承错误现在将始终生成致命错误。以前在某些情况下会生成警告。
      <!-- RFC: https://wiki.php.net/rfc/lsp_errors -->
     </para>
    </listitem>
    <listitem>
     <para>
      相对于位移、加法还有减法，连接运算符的优先级已经更改。
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
echo "Sum: " . $a + $b;
// 之前解释为：
echo ("Sum: " . $a) + $b;
// 现在解释为：
echo "Sum:" . ($a + $b);
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/concatenation_precedence -->
     </para>
    </listitem>
    <listitem>
     <para>
      在运行时默认值解析为 &null; 的参数，将不在默默将参数类型标记为可为 null。必须改用指定可为 null 类型或者默认值为 &null;。
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// 之前：
function test(int $arg = CONST_RESOLVING_TO_NULL) {}
// 之后：
function test(?int $arg = CONST_RESOLVING_TO_NULL) {}
// 或者是
function test(int $arg = null) {}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      一些警告已转换为 <classname>Error</classname> 异常：
     </para>
     <para>
      <simplelist>
       <member>
        尝试向非对象写入属性。之前会默默的为 null、false 和空字符串创建 stdClass 对象。
       </member>
       <member>
        尝试追加元素到已使用 PHP_INT_MAX 作为 key 的数组。
       </member>
       <member>
        尝试使用无效类型（array 或 object）作为数组的 key 或者字符串的 offset。
       </member>
       <member>尝试向标量值写入数组索引。</member>
       <member>尝试解包非数组或 Traversable。</member>
       <member>
        尝试访问未定义的常量，之前，访问未定义的常量将会导致警告并解释为字符串。
       </member>
       <member>
        传递错误的参数数量到非可变参数内置函数将引发 <classname>ArgumentCountError</classname>。
       </member>
      </simplelist>
     </para>
     <para>
      一些通知已转换为警告：
     </para>
     <para>
      <simplelist>
       <member>尝试读取未定义的变量。</member>
       <member>尝试读取未定义的属性。</member>
       <member>尝试读取未定义的数组 key。</member>
       <member>尝试读取非对象的属性。</member>
       <member>尝试读取非数组的数组索引。</member>
       <member>尝试转换数组为字符串。</member>
       <member>尝试使用资源作为数组 key。</member>
       <member>尝试使用 null、bool、float 作为字符串 offset。</member>
       <member>尝试读取越界的字符串 offset。</member>
       <member>尝试将空字符串分配给字符串 offset。</member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/engine_warnings -->
     </para>
    </listitem>
    <listitem>
     <para>
      尝试将多字节字符串分配给字符串 offset 现在将发出警告。
     </para>
    </listitem>
    <listitem>
     <para>
      源文件中的异常字符（比如字符串边界外的 NUL 字节）现在将导致 <classname>ParseError</classname> 异常而不是编译警告。
     </para>
    </listitem>
    <listitem>
     <para>
      未捕获异常现在会经过“clean shutdown”，这意味着未捕获的异常之后调用析构方法。
     </para>
    </listitem>
    <listitem>
     <para>
      编译时 fatal error“Only variables can be passed by reference”已延迟到运行时，并转换为“Argument cannot be passed by reference”<classname>Error</classname> 异常。
     </para>
    </listitem>
    <listitem>
     <para>
      一些“Only variables should be passed by reference”通知已转换为“Argument
      cannot be passed by reference”异常。
     </para>
    </listitem>
    <listitem>
     <para>
      匿名类生成的名称已经发生了改变。现在生成的名称将包括第一个父类或接口的名称：
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
new class extends ParentClass {};
// -> ParentClass@anonymous
new class implements FirstInterface, SecondInterface {};
// -> FirstInterface@anonymous
new class {};
// -> class@anonymous
?>
]]>
      </programlisting>
     </para>
     <para>
      上面显示的名称仍然后跟 NUL 字节和唯一的后缀。
     </para>
    </listitem>
    <listitem>
     <para>
      trait 别名适配中的非绝对 trait 方法引用现在必须明确：
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class X {
    use T1, T2 {
        func as otherFunc;
    }
    function func() {}
}
?>
]]>
      </programlisting>
     </para>
     <para>
      如果同时存在 <code>T1::func()</code> 和 <code>T2::func()</code>，以前此代码会默默接受，并且 func 指向
      <code>T1::func</code>。现在则会生成 fatal error，必须明确编写 <code>T1::func</code> or <code>T2::func</code>。
     </para>
    </listitem>
    <listitem>
     <para>
      trait 中定义的 abstract 方法签名现在会检查类中实现的方法：
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
trait MyTrait {
    abstract private function neededByTrait(): string;
}

class MyClass {
    use MyTrait;

    // 错误，因为返回类型不匹配。
    private function neededByTrait(): int { return 42; }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
      现在将禁用的函数视为不存在的函数，调用禁用函数将报告未知，并且现在可以重新定义已禁用的函数。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>data://</literal> 流封装协议不在可写，这与文档中的行为相匹配。
     </para>
    </listitem>
    <listitem>
     <para>
      算术和位操作符 <literal>+</literal>、<literal>-</literal>、<literal>*</literal>、<literal>/</literal>、<literal>**</literal>、<literal>%</literal>、<literal>&lt;&lt;</literal>、<literal>&gt;&gt;</literal>、<literal>&amp;</literal>、<literal>|</literal>、<literal>^</literal>、<literal>~</literal>、<literal>++</literal>、<literal>--</literal>
      的其中一个操作符是 &array;、&resource; 或非重载 &object; 时，现在将始终抛出
      <classname>TypeError</classname>。唯一的例外是仍然支持 array <literal>+</literal> array 的合并操作。
      <!-- RFC: https://wiki.php.net/rfc/arithmetic_operator_type_checks -->
     </para>
    </listitem>
    <listitem>
     <para>
      浮点数到字符串的强制转换现在始终不会受到独立 locale 的影响。
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
setlocale(LC_ALL, "de_DE");
$f = 3.14;
echo $f, "\n";
// Previously: 3,14
// Now:        3.14
?>
]]>
      </programlisting>
     </para>
     <para>
      参阅 <function>printf</function>、<function>number_format</function> 和
      <methodname>NumberFormatter</methodname> 了解自定义数字格式的方法。
      <!-- RFC: https://wiki.php.net/rfc/locale_independent_float_to_string -->
     </para>
    </listitem>
    <listitem>
     <para>
      已经移除对使用大括号（花括号）进行偏移量访问的弃用支持。
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// 将：
$array{0};
$array{"key"};
// 改为：
$array[0];
$array["key"];
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/deprecate_curly_braces_array_access -->
     </para>
    </listitem>
    <listitem>
     <para>
      在私有方法上应用 final 修饰符现在将产生警告，除非该方法是构造方法。
      <!-- FC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      如果对象的构造方法 <function>exit</function>，那么将不再调用对象的析构方法，这与构造方法抛出异常时的行为相匹配。
     </para>
    </listitem>
    <listitem>
     <para>
      命名空间名不能再包含空格：<code>Foo\Bar</code> 将识别为命名空间名称，而 <code>Foo \ Bar</code>
      则不能。相反，保留关键字现在允许作为命名空间片段，这可能也会改变代码的解释：<code>new\x</code> 现在与
      <code>constant('new\x')</code> 相同，而不是 <code>new \x()</code>。
      <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
     </para>
    </listitem>
    <listitem>
     <para>
      嵌套的三元表达式现在需要的括号。
      <!-- RFC: https://wiki.php.net/rfc/ternary_associativity -->
     </para>
    </listitem>
    <listitem>
     <para>
      <function>debug_backtrace</function> 和 <methodname>Exception::getTrace</methodname> 将不再提供对参数的引用。通过回溯将不可能更改函数参数。
     </para>
    </listitem>
    <listitem>
     <para>
      数字字符串的处理方式已经更改，以便更直观和更少出错。现在允许在数字字符串中使用尾随空格，以便与起始空格的处理方式保持一致。这主要影响：
     </para>
     <para>
      <simplelist>
       <member><function>is_numeric</function> 函数</member>
       <member>字符串间的比较</member>
       <member>类型声明</member>
       <member>递增/减操作</member>
      </simplelist>
     </para>
     <para>
      “前置数字字符串”的概念已删除大部分；仍然存在的目的是为了简化迁移。发出 <constant>E_NOTICE</constant>“A non well-formed numeric value
      encountered”的字符串现在将发出 <constant>E_WARNING</constant>“A non-numeric value encountered”，并且所有发出
      <constant>E_WARNING</constant>“A non-numeric value encountered”的字符串现在将抛出 <classname>TypeError</classname>。这主要会影响：
     </para>
     <para>
      <simplelist>
       <member>算术运算</member>
       <member>位运算</member>
      </simplelist>
     </para>
     <para>
      <constant>E_WARNING</constant> 到 <classname>TypeError</classname> 的变更也影响了 <constant>E_WARNING</constant>“Illegal string
      offset 'string'”的非法字符串偏移。从字符串到 int/float 的明确强制转换的行为没有改变。
      <!-- RFC: https://wiki.php.net/rfc/saner-numeric-strings -->
     </para>
    </listitem>
    <listitem>
     <para>
      如果魔术方法声明了参数和返回类型，那么它们现在将会检查这些。签名应该与以下列表匹配：
     </para>
     <para>
      <simplelist>
       <member><code>__call(string $name, array $arguments): mixed</code></member>
       <member><code>__callStatic(string $name, array $arguments): mixed</code></member>
       <member><code>__clone(): void</code></member>
       <member><code>__debugInfo(): ?array</code></member>
       <member><code>__get(string $name): mixed</code></member>
       <member><code>__invoke(mixed $arguments): mixed</code></member>
       <member><code>__isset(string $name): bool</code></member>
       <member><code>__serialize(): array</code></member>
       <member><code>__set(string $name, mixed $value): void</code></member>
       <member><code>__set_state(array $properties): object</code></member>
       <member><code>__sleep(): array</code></member>
       <member><code>__unserialize(array $data): void</code></member>
       <member><code>__unset(string $name): void</code></member>
       <member><code>__wakeup(): void</code></member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/magic-methods-signature -->
     </para>
    </listitem>
    <listitem>
     <para>
      <function>call_user_func_array</function> 数组的键现在将解释为参数名，而不是默默忽略。
     </para>
    </listitem>
    <listitem>
     <para>
      不再允许在命名空间内声明名为 <literal>assert()</literal> 的函数，并发出 <constant>E_COMPILE_ERROR</constant>。<function>assert</function>
      函数受引擎的特殊处理，当定义具有相同名称的命名空间函数时，可能会导致不一致的行为。
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.incompatible.resource2object">
  <title>迁移资源到对象</title>

  <para>
   一些 &resource; 已经迁移到了 &object;。返回值检测从使用 <function>is_resource</function> 替换为是否是 &false;。
  </para>
  <itemizedlist>
    <listitem>
     <para>
      <function>curl_init</function> 现在将返回 <classname>CurlHandle</classname> 对象而不是 &resource;。<function>curl_close</function>
      函数不再有作用，相反，如果不再引用，<classname>CurlHandle</classname> 实例将自动销毁。
     </para>
    </listitem>
    <listitem>
     <para>
      <function>curl_multi_init</function> 现在将返回 <classname>CurlMultiHandle</classname> 对象而不是 &resource;。<function>curl_multi_close</function>
      函数不再有作用，相反，如果不再引用，<classname>CurlMultiHandle</classname> 实例将自动销毁。
     </para>
    </listitem>
    <listitem>
     <para>
      <function>curl_share_init</function> 现在将返回 <classname>CurlShareHandle</classname> 对象而不是 &resource;。<function>curl_share_close</function>
      函数不再有作用，相反，如果不再引用，<classname>CurlShareHandle</classname> 实例将自动销毁。
     </para>
    </listitem>
   <listitem>
    <para>
     <function>enchant_broker_init</function> 现在将返回 <classname>EnchantBroker</classname> 对象而不是 &resource;。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_broker_request_dict</function> 和
     <function>enchant_broker_request_pwl_dict</function> 现在将返回
     <classname>EnchantDictionary</classname> 对象而不是 &resource;。
    </para>
   </listitem>
   <listitem>
    <para>
     GD 扩展现在使用 <classname>GdImage</classname> 对象作为图像的底层数据结构，而不是 &resource;。<function>imagedestroy</function>
     函数不再有作用，相反，如果不再引用，<classname>GdImage</classname> 实例将自动销毁。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_x509_read</function> 和 <function>openssl_csr_sign</function> 现在将返回 <classname>OpenSSLCertificate</classname>
     对象而不是 &resource;。弃用 <function>openssl_x509_free</function> 函数且不再起作用，相反，如果不再引用，<classname>OpenSSLCertificate</classname>
     实例将自动销毁。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_csr_new</function> 现在将返回
     <classname>OpenSSLCertificateSigningRequest</classname> 对象而不是 &resource;。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_pkey_new</function> 现在将返回 <classname>OpenSSLAsymmetricKey</classname> 对象而不是 &resource;。弃用
     <function>openssl_pkey_free</function> 函数且不再起作用，相反，如果不再引用，<classname>OpenSSLAsymmetricKey</classname>
     实例将自动销毁。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>shmop_open</function> 现在将返回 <classname>Shmop</classname> 对象而不是 &resource;。弃用
     <function>shmop_close</function> 函数且不再起作用，相反，如果不再引用，<classname>Shmop</classname> 实例将自动销毁。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>socket_create</function>、<function>socket_create_listen</function>、<function>socket_accept</function>、<function>socket_import_stream</function>、<function>socket_addrinfo_connect</function>、<function>socket_addrinfo_bind</function>
     和 <function>socket_wsaprotocol_info_import</function> 现在将返回 <classname>Socket</classname> 对象而不是
     &resource;。<function>socket_addrinfo_lookup</function> 现在将返回 <classname>AddressInfo</classname> 对象组成的数组，而不是 &resource;。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>msg_get_queue</function> 现在将返回 <classname>SysvMessageQueue</classname>
     对象而不是 &resource;。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>sem_get</function> 现在将返回 <classname>SysvSemaphore</classname>
     对象而不是 &resource;。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>shm_attach</function> 现在将返回 <classname>SysvSharedMemory</classname>
     对象而不是 &resource;。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>xml_parser_create</function> 和 <function>xml_parser_create_ns</function> 现在将返回 <classname>XMLParser</classname>
     对象而不是 &resource;。<function>xml_parser_free</function> 函数不再有作用，相反，如果不再引用，<classname>XmlParser</classname> 实例将自动销毁。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="book.xmlwriter">XMLWriter</link> 函数现在分别接受和返回 <classname>XMLWriter</classname> 对象而不是 &resource;。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>inflate_init</function> 现在将返回 <classname>InflateContext</classname> 对象而不是 &resource;。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>deflate_init</function> 现在将返回 <classname>DeflateContext</classname> 对象而不是 &resource;。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.com">
  <title>COM 和 .Net (Windows)</title>

  <para>
   移除从类型库导入不区分大小写常量的功能。<function>com_load_typelib</function> 的第二个参数不再是 false；不再禁用 <link
   linkend="ini.com.autoregister-casesensitive">com.autoregister_casesensitive</link>；忽略 <link
   linkend="ini.com.typelib-file">com.typelib_file</link> 中的不区分大小写标记。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.curl">
  <title>CURL</title>

  <para>
   <constant>CURLOPT_POSTFIELDS</constant> 不再接受对象作为数组。要将对象解释为数组，手动执行 <code>(array)</code> 转换。这同样适用于接受数组的其它选项。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.datetime">
  <title>日期和时间</title>

  <para>
   <function>mktime</function> 和 <function>gmmktime</function> 现在强制需要至少一个参数。<function>time</function> 可以用来获取当前时间戳。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.dom">
  <title>DOM</title>

  <para>
   已移除 DOM 扩展中无行为和包含测试数据的的未实现类。这些类也已在最新版本的 DOM 标准中移除：
  </para>
  <para>
   <simplelist>
    <member><classname>DOMNameList</classname></member>
    <member><classname>DomImplementationList</classname></member>
    <member><classname>DOMConfiguration</classname></member>
    <member><classname>DomError</classname></member>
    <member><classname>DomErrorHandler</classname></member>
    <member><classname>DOMImplementationSource</classname></member>
    <member><classname>DOMLocator</classname></member>
    <member><classname>DOMUserDataHandler</classname></member>
    <member><classname>DOMTypeInfo</classname></member>
    <member><classname>DOMStringExtend</classname></member>
   </simplelist>
  </para>
  <para>
   已移除 DOM 扩展中没有实现行为的方法：
  </para>
  <para>
   <simplelist>
    <member><methodname>DOMNamedNodeMap::setNamedItem</methodname></member>
    <member><methodname>DOMNamedNodeMap::removeNamedItem</methodname></member>
    <member><methodname>DOMNamedNodeMap::setNamedItemNS</methodname></member>
    <member><methodname>DOMNamedNodeMap::removeNamedItemNS</methodname></member>
    <member><methodname>DOMText::replaceWholeText</methodname></member>
    <member><methodname>DOMNode::compareDocumentPosition</methodname></member>
    <member><methodname>DOMNode::isEqualNode</methodname></member>
    <member><methodname>DOMNode::getFeature</methodname></member>
    <member><methodname>DOMNode::setUserData</methodname></member>
    <member><methodname>DOMNode::getUserData</methodname></member>
    <member><methodname>DOMDocument::renameNode</methodname></member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.enchant">
  <title>Enchant</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>enchant_broker_list_dicts</function>、<function>enchant_broker_describe</function> 和
     <function>enchant_dict_suggest</function> 现在将返回空数组而不是 &null;。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.exif">
  <title>Exif</title>

  <para>
   已移除 <function>read_exif_data</function>；应该使用 <function>exif_read_data</function> 替代。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.filter">
  <title>Filter</title>

  <itemizedlist>
   <listitem>
    <para>
     已移除 <constant>FILTER_VALIDATE_URL</constant> 过滤中的 <constant>FILTER_FLAG_SCHEME_REQUIRED</constant> 和
     <constant>FILTER_FLAG_HOST_REQUIRED</constant> flag。<literal>scheme</literal>
     和 <literal>host</literal> 始终（并且一直）必需。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>filter_input</function> 等函数的 <constant>INPUT_REQUEST</constant> 和 <constant>INPUT_SESSION</constant>
     源码已经移除。这些从未实现过，并且使用它们将始终生成警告。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gd">
  <title>GD</title>

  <itemizedlist>
   <listitem>
    <para>
     移除弃用函数 <function>image2wbmp</function>。
     <!-- RFC: https://wiki.php.net/rfc/image2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     移除弃用函数 <function>png2wbmp</function> 和 <function>jpeg2wbmp</function>。
     <!-- RFC: https://wiki.php.net/rfc/deprecate-png-jpeg-2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>imagecropauto</function> 的 <parameter>mode</parameter> 参数默认不再接受
     <literal>-1</literal>。而是应该使用 <constant>IMG_CROP_DEFAULT</constant>。
    </para>
   </listitem>
   <listitem>
    <para>
     Windows 上，<filename>php_gd2.dll</filename> 已经重命名为 <filename>php_gd.dll</filename>。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gmp">
  <title>GMP</title>

  <para>
   已经移除 <function>gmp_random</function>。应该使用 <function>gmp_random_range</function> 或
   <function>gmp_random_bits</function>。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.iconv">
  <title>Iconv</title>

  <para>
   不再支持在发生错误时没有正确设置  <varname>errno</varname> 的 iconv 实现。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.imap">
  <title>IMAP</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>imap_headerinfo</function> 已移除未使用的 <parameter>default_host</parameter> 参数。
    </para>
   </listitem>
   <listitem>
    <para>
     已移除 <function>imap_headerinfo</function> 的别名函数 <function>imap_header</function>。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.intl">
  <title>国际化函数</title>

  <itemizedlist>
   <listitem>
    <para>
     已移除弃用常量 <constant>INTL_IDNA_VARIANT_2003</constant>。
     <!-- RFC: https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003 -->
    </para>
   </listitem>
   <listitem>
    <para>
     移除弃用常量 <constant>Normalizer::NONE</constant>。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.ldap">
  <title>LDAP</title>

  <itemizedlist>
   <listitem>
    <para>
     移除弃用函数 <function>ldap_sort</function>、<function>ldap_control_paged_result</function>
     和 <function>ldap_control_paged_result_response</function>。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>ldap_set_rebind_proc</function> 的接口已修改；<parameter>callback</parameter>
     不再接受空字符串；应该使用 &null; 代替。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.mbstring">
  <title>MBString</title>

  <itemizedlist>
   <listitem>
    <para>
     已移除 <link linkend="ini.mbstring.func-overload">mbstring.func_overload</link> 指令。与其相关的
     <constant>MB_OVERLOAD_MAIL</constant>、<constant>MB_OVERLOAD_STRING</constant> 和 <constant>MB_OVERLOAD_REGEX</constant>
     常量也已移除。最后，<function>mb_get_info</function> 中的 <literal>"func_overload"</literal> 和
     <literal>"func_overload_list"</literal> 条目也已移除。
    </para>
   </listitem>
   <listitem>
    <para>
     使用 <function>mb_parse_str</function> 时必须指定结果数组。
    </para>
   </listitem>
   <listitem>
    <para>
     一些弃用的的 mbregex 别名已移除。请参阅下面的列表，以了解应该使用哪些函数：
    </para>
    <para>
     <simplelist>
      <member><function>mbregex_encoding</function> → <function>mb_regex_encoding</function></member>
      <member><function>mbereg</function> → <function>mb_ereg</function></member>
      <member><function>mberegi</function> → <function>mb_eregi</function></member>
      <member><function>mbereg_replace</function> → <function>mb_ereg_replace</function></member>
      <member><function>mberegi_replace</function> → <function>mb_eregi_replace</function></member>
      <member><function>mbsplit</function> → <function>mb_split</function></member>
      <member><function>mbereg_match</function> → <function>mb_ereg_match</function></member>
      <member><function>mbereg_search</function> → <function>mb_ereg_search</function></member>
      <member><function>mbereg_search_pos</function> → <function>mb_ereg_search_pos</function></member>
      <member><function>mbereg_search_regs</function> → <function>mb_ereg_search_regs</function></member>
      <member><function>mbereg_search_init</function> → <function>mb_ereg_search_init</function></member>
      <member><function>mbereg_search_getregs</function> → <function>mb_ereg_search_getregs</function></member>
      <member><function>mbereg_search_getpos</function> → <function>mb_ereg_search_getpos</function></member>
      <member><function>mbereg_search_setpos</function> → <function>mb_ereg_search_setpos</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_ereg_replace</function> 已移除 <literal>e</literal> 修饰符。应该使用 <function>mb_ereg_replace_callback</function> 代替。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_ereg_replace</function> 的非字符串模式参数现在将解释为字符串而不是 ASCII 码点。可以通过调用 <function>chr</function> 来恢复以前的行为。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_strpos</function>、<function>mb_strrpos</function>、<function>mb_stripos</function>、<function>mb_strripos</function>、<function>mb_strstr</function>、<function>mb_stristr</function>、<function>mb_strrchr</function>
     和 <function>mb_strrichr</function> 的 <parameter>needle</parameter> 参数现在可以为空。
    </para>
   </listitem>
   <listitem>
    <para>
     已移除 <function>mb_decode_numericentity</function> 内部不使用的 <parameter>is_hex</parameter> 参数。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_strrpos</function> 函数的第三个参数传递编码而不是偏移量的遗留行为已经移除；应该将带编码的 <literal>0</literal>
     偏移量作为第四个参数提供。
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>ISO_8859-*</literal> 字符编码的别名已替换为 <literal>ISO8859-*</literal> 别名，以便与 iconv 扩展实现更好的互操作性。带下划线的 mbregex ISO 8859
     别名（<literal>ISO_8859_*</literal> 和 <literal>ISO8859_*</literal>）也已移除。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_ereg</function> 和 <function>mb_eregi</function> 现在将在匹配成功时返回布尔值 &true;。之前，如果未传递
     <parameter>matches</parameter>，则返回整数 <literal>1</literal>；如果传递了 <parameter>matches</parameter>，则返回
     <code>max(1, strlen($matches[0]))</code>。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.oci8">
  <title>OCI8</title>

  <itemizedlist>
   <listitem>
    <para>
     <classname>OCI-Lob</classname> 类现在叫做 <classname>OCILob</classname>，<classname>OCI-Collection</classname> 类现在叫做
     <classname>OCICollection</classname>，以实现 PHP 8 arginfo 类型注释工具强制执行的名称合规。
    </para>
   </listitem>
   <listitem>
    <para>
     多个别名函数已标记为已弃用。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>oci_internal_debug</function> 及其 <function>ociinternaldebug</function> 已移除。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.odbc">
  <title>ODBC</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>odbc_connect</function> no longer reuses connections.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>odbc_exec</function> 未使用的 <parameter>flags</parameter> 参数已移除。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.openssl">
  <title>OpenSSL</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>openssl_seal</function> 和 <function>openssl_open</function> 现在需要传递 <parameter>method</parameter>，现在认为之前的
     <literal>"RC4"</literal> 默认值不安全。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pcre">
  <title>正则表达式（Perl 兼容）</title>

  <para>
   当传递无效的转义序列时，将不再解释为文字。此行为之前需要 <literal>X</literal> 修饰符——现在已忽略。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo">
  <title>PHP 数据对象</title>

  <itemizedlist>
   <listitem>
    <para>
     默认错误处理模式已经从“silent”变更为“exceptions”。参阅<link
     linkend="pdo.error-handling">错误和错误处理</link>获取详情。

     <!-- RFC: https://wiki.php.net/rfc/pdo_default_errmode -->
    </para>
   </listitem>
   <listitem>
    <para>
     一些 PDO 方法的签名已更改：
    </para>
    <para>
     <simplelist>
      <member><code>PDO::query(string $query, ?int $fetchMode  = null, mixed  ...$fetchModeArgs)</code></member>
      <member><code>PDOStatement::setFetchMode(int $mode, mixed ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-odbc">
  <title>PDO ODBC</title>

  <para>
   &php.ini; 指令
   <link linkend="ini.pdo-odbc.db2-instance-name">pdo_odbc.db2_instance_name</link> 已移除。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-mysql">
  <title>PDO MySQL</title>

  <para>
   <methodname>PDO::inTransaction</methodname> 现在报告连接的实际事务状态，而不是 PDO
   维护的近似状态。如果执行的是“隐式事务”查询，<methodname>PDO::inTransaction</methodname> 将会随后返回
   &false;，因为事务不再活动状态。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pgsql">
  <title>PostgreSQL</title>

  <itemizedlist>
   <listitem>
    <para>
     弃用的 <function>pg_connect</function> 使用多个参数的语法不再支持，而是使用连接字符串。
    </para>
   </listitem>
   <listitem>
    <para>
     弃用的 <function>pg_lo_import</function> 和 <function>pg_lo_export</function> 将 connection
     作为最后一个参数传递的签名不再支持。应该将 connection 作为第一个参数传递。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>pg_fetch_all</function> 对于 0 条记录的结果集，现在将返回空数组而不是 &false;。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.phar">
  <title>Phar</title>

  <para>
   与 phar 关联的元数据将不再自动反序列化，以修复由于对象实例化、自动加载等导致的潜在安全漏洞。
   <!-- RFC: https://wiki.php.net/rfc/phar_stop_autoloading_metadata -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.reflection">
  <title>Reflection</title>

  <itemizedlist>
   <listitem>
    <para>
     方法签名
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($args)</code></member>
      <member><code>ReflectionFunction::invoke($args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $args)</code></member>
     </simplelist>
    </para>
    <para>
     已变更为：
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance(...$args)</code></member>
      <member><code>ReflectionFunction::invoke(...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, ...$args)</code></member>
     </simplelist>
    </para>
    <para>
     必须同时兼容 PHP 7 和 PHP 8 的代码可以使用以下签名来兼容这两个版本：
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($arg = null, ...$args)</code></member>
      <member><code>ReflectionFunction::invoke($arg = null, ...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $arg = null, ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     ReflectionType::__toString() 方法现在将返回该类型的完整调试表示，并且不再弃用。特别是，结果将包括可空类型的可空性指示符。返回值的格式不稳定，并且可能在不同 PHP 版本之间发生变化。
    </para>
   </listitem>
   <listitem>
    <para>
     Reflection export() 方法已经移除。相反，反射对象可以转换为字符串。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionMethod::isConstructor</methodname> 和 <methodname>ReflectionMethod::isDestructor</methodname>
     现在也为接口的 <link linkend="object.construct">__construct()</link> 和 <link linkend="object.destruct">__destruct()</link>
     方法返回 &true;。之前只用于类方法和 trait。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionType::isBuiltin</methodname> 方法已移至
     <classname>ReflectionNamedType</classname>。<classname>ReflectionUnionType</classname> 没有。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sockets">
  <title>Sockets</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>socket_addrinfo_lookup</function> 弃用的 <constant>AI_IDN_ALLOW_UNASSIGNED</constant> 和
     <constant>AI_IDN_USE_STD3_ASCII_RULES</constant> <parameter>flags</parameter> 已移除。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.spl">
  <title>PHP 标准库（SPL）</title>

  <itemizedlist>
   <listitem>
    <para>
     <methodname>SplFileObject::fgetss</methodname> 已移除。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplFileObject::seek</methodname> 总是寻找到一行的开头。之前，位置 <literal>&gt;=1</literal>
     会搜索到下一行的开头。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplHeap::compare</methodname> 现在指定方法签名。实现此方法的继承类现在必须使用兼容的方法签名。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplDoublyLinkedList::push</methodname>、<methodname>SplDoublyLinkedList::unshift</methodname> 和
     <methodname>SplQueue::enqueue</methodname> 现在返回 <type>void</type> 而不是 &true;。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>spl_autoload_register</function> 现在将始终对无效参数抛出 <classname>TypeError</classname>，因此将会忽略第二个参数
     <parameter>do_throw</parameter>，并且如果将其设置为 &false;，则会发出 notice。
    </para>
   </listitem>
   <listitem>
    <para>
     <classname>SplFixedArray</classname> 现在是 <interfacename>IteratorAggregate</interfacename> 而不是
     <interfacename>Iterator</interfacename>。<methodname>SplFixedArray::rewind</methodname>、<methodname>SplFixedArray::current</methodname>、<methodname>SplFixedArray::key</methodname>、<methodname>SplFixedArray::next</methodname>
     和 <methodname>SplFixedArray::valid</methodname> 已移除。在其位置上新增了 <methodname>SplFixedArray::getIterator</methodname>。现在任何在
     SplFixedArray 上迭代的代码都必须通过 <methodname>SplFixedArray::getIterator</methodname> 获取
     <interfacename>Iterator</interfacename>。这意味着 <classname>SplFixedArray</classname> 现在可以安全地在嵌套循环中使用。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.standard">
  <title>标准库</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>assert</function> will no longer evaluate string arguments, instead they will be
     treated like any other argument. <code>assert($a == $b)</code> should be used instead of
     <code>assert('$a == $b')</code>. The <link
     linkend="ini.assert.quiet-eval">assert.quiet_eval</link> ini directive and the
     <constant>ASSERT_QUIET_EVAL</constant> constant have also been removed, as they would no longer
     have any effect.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_str</function> can no longer be used without specifying a result array.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="filters.string.strip_tags">string.strip_tags</link> filter has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>needle</parameter> argument of <function>strpos</function>,
     <function>strrpos</function>, <function>stripos</function>, <function>strripos</function>,
     <function>strstr</function>, <function>strchr</function>, <function>strrchr</function>, and
     <function>stristr</function> will now always be interpreted as a string. Previously non-string
     needles were interpreted as an ASCII code point. An explicit call to <function>chr</function> can
     be used to restore the previous behavior.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>needle</parameter> argument for <function>strpos</function>,
     <function>strrpos</function>, <function>stripos</function>, <function>strripos</function>,
     <function>strstr</function>, <function>stristr</function> and <function>strrchr</function> can
     now be empty.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>length</parameter> argument for <function>substr</function>,
     <function>substr_count</function>, <function>substr_compare</function>, and
     <function>iconv_substr</function> can now be &null;. &null; values will behave as if no length
     argument was provided and will therefore return the remainder of the string instead of an empty
     string.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>length</parameter> argument for <function>array_splice</function> can now be
     &null;. &null; values will behave identically to omitting the argument, thus removing everything
     from the <parameter>offset</parameter> to the end of the array.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>args</parameter> argument of <function>vsprintf</function>,
     <function>vfprintf</function>, and <function>vprintf</function> must now be an array. Previously
     any type was accepted.
    </para>
   </listitem>
   <listitem>
    <para>
     The <literal>'salt'</literal> option of <function>password_hash</function> is no longer
     supported. If the <literal>'salt'</literal> option is used a warning is generated, the provided
     salt is ignored, and a generated salt is used instead.
    </para>
   </listitem>
   <listitem>
    <para>
     The <function>quotemeta</function> function will now return an empty string if an empty string
     was passed. Previously &false; was returned.
    </para>
   </listitem>
   <listitem>
    <para>
     The following functions have been removed:
    </para>
    <para>
     <simplelist>
      <member><function>hebrevc</function></member>
      <member><function>convert_cyr_string</function></member>
      <member><function>money_format</function></member>
      <member><function>ezmlm_hash</function></member>
      <member><function>restore_include_path</function></member>
      <member><function>get_magic_quotes_gpc</function></member>
      <member><function>get_magic_quotes_runtime</function></member>
      <member><function>fgetss</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     <constant>FILTER_SANITIZE_MAGIC_QUOTES</constant> has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     Calling <function>implode</function> with parameters in a reverse order <code>($pieces,
     $glue)</code> is no longer supported.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_url</function> will now distinguish absent and empty queries and fragments:
    </para>
    <para>
     <simplelist>
      <member><code>http://example.com/foo → query = null, fragment = null</code></member>
      <member><code>http://example.com/foo? → query = "",   fragment = null</code></member>
      <member><code>http://example.com/foo# → query = null, fragment = ""</code></member>
      <member><code>http://example.com/foo?# → query = "",   fragment = ""</code></member>
     </simplelist>
      Previously all cases resulted in query and fragment being &null;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>var_dump</function> and <function>debug_zval_dump</function> will now print
     floating-point numbers using <link linkend="ini.serialize-precision">serialize_precision</link>
     rather than <link linkend="ini.precision">precision</link>. In a default configuration, this
     means that floating-point numbers are now printed with full accuracy by these debugging
     functions.
    </para>
   </listitem>
   <listitem>
    <para>
     If the array returned by <link linkend="object.sleep">__sleep()</link> contains non-existing
     properties, these are now silently ignored. Previously, such properties would have been
     serialized as if they had the value &null;.
    </para>
   </listitem>
   <listitem>
    <para>
     The default locale on startup is now always <literal>"C"</literal>. No locales are inherited from
     the environment by default. Previously, <constant>LC_ALL</constant> was set to
     <literal>"C"</literal>, while <constant>LC_CTYPE</constant> was inherited from the environment.
     However, some functions did not respect the inherited locale without an explicit
     <function>setlocale</function> call. An explicit <function>setlocale</function> call is now
     always required if a locale component should be changed from the default.
    </para>
   </listitem>
   <listitem>
    <para>
     The deprecated DES fallback in <function>crypt</function> has been removed. If an unknown salt
     format is passed to <function>crypt</function>, the function will fail with <literal>*0</literal>
     instead of falling back to a weak DES hash now.
    </para>
   </listitem>
   <listitem>
    <para>
     Specifying out of range rounds for SHA256/SHA512 <function>crypt</function> will now fail with
     <literal>*0</literal> instead of clamping to the closest limit. This matches glibc behavior.
    </para>
   </listitem>
   <listitem>
    <para>
     The result of sorting functions may have changed, if the array contains elements that compare as
     equal.
    </para>
   </listitem>
   <listitem>
    <para>
     Any functions accepting callbacks that are not explicitly specified to accept parameters by
     reference will now warn if a callback with reference parameters is used. Examples include
     <function>array_filter</function> and <function>array_reduce</function>. This was already the
     case for most, but not all, functions previously.
    </para>
   </listitem>
   <listitem>
    <para>
     The HTTP stream wrapper as used by functions like <function>file_get_contents</function>
     now advertises HTTP/1.1 rather than HTTP/1.0 by default. This does not change the behavior of the
     client, but may cause servers to respond differently. To retain the old behavior, set the
     <literal>'protocol_version'</literal> stream context option, e.g.
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['http' => ['protocol_version' => '1.0']]);
echo file_get_contents('http://example.org', false, $ctx);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     Calling <function>crypt</function> without an explicit salt is no longer supported. If you would
     like to produce a strong hash with an auto-generated salt, use
     <function>password_hash</function> instead.
    </para>
   </listitem>
   <listitem>
    <para>
    <function>substr</function>, <function>mb_substr</function>, <function>iconv_substr</function> and
    <function>grapheme_substr</function> now consistently clamp out-of-bounds offsets to the string
    boundary. Previously, &false; was returned instead of the empty string in some cases.
    </para>
   </listitem>
   <listitem>
    <para>
     On Windows, the program execution functions (<function>proc_open</function>, <function>exec</function>,
     <function>popen</function> etc.) using the shell, now consistently execute <command>%comspec% /s
     /c "$commandline"</command>, which has the same effect as executing
     <command>$commandline</command> (without additional quotes).
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sysvsem">
  <title>Sysvsem</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>sem_get</function> 的 <parameter>auto_release</parameter> 参数已从接受 int
     更改为接受 bool。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tidy">
  <title>Tidy</title>

  <itemizedlist>
   <listitem>
    <para>
     从 <function>tidy_repair_string</function> 中删除内部未使用的 
     <parameter>use_include_path</parameter> 参数。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>tidy::repairString</methodname> 和 <methodname>tidy::repairFile</methodname> 成为静态方法。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tokenizer">
  <title>Tokenizer</title>

  <itemizedlist>
   <listitem>
    <para>
     <literal>T_COMMENT</literal> 记号将不再包含尾随的换行符。换行符将成为以下 <literal>T_WHITESPACE</literal>
     记号的一部分。需要注意的是，<literal>T_COMMENT</literal> 后面并不总是跟空格，也可能跟着
     <literal>T_CLOSE_TAG</literal> 或者文件结尾。
    </para>
   </listitem>
   <listitem>
    <para>
     命名空间名称现在使用 <literal>T_NAME_QUALIFIED</literal>（<code>Foo\Bar</code>）、<literal>T_NAME_FULLY_QUALIFIED</literal>（<code>\Foo\Bar</code>）
     和 <literal>T_NAME_RELATIVE</literal>（<code>namespace\Foo\Bar</code>）记号表示。
     <literal>T_NS_SEPARATOR</literal> is only used for standalone namespace separators, and only
     syntactially valid in conjunction with group use declarations.
     <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlreader">
  <title>XMLReader</title>

  <para>
   <methodname>XMLReader::open</methodname> 和 <methodname>XMLReader::xml</methodname>
   现在是静态方法。也可以作为实例方法调用，但如果继承类需要覆盖这些方法，要声明为 static。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlrpc">
  <title>XML-RPC</title>

  <para>
   XML-RPC 扩展已移动到 PECL，不再是 PHP 发行版的一部分。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zip">
  <title>Zip</title>

  <para>
   <constant>ZipArchive::OPSYS_Z_CPM</constant> 已移除（名字错误）。使用
   <constant>ZipArchive::OPSYS_CPM</constant> 代替。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zlib">
  <title>Zlib</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>gzgetss</function> 已移除。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="ini.zlib.output-compression">zlib.output_compression</link> 不再对
     <literal>Content-Type: image/*</literal> 自动禁用。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.php-test-packs">
  <title>Windows PHP 测试包</title>

  <para>
   测试运行器从 <filename>run-test.php</filename> 重命名为 <filename>run-tests.php</filename>，以匹配其在
   php-src 中的名字。
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
