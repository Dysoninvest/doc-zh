<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 52407313885d27a4e891e08dd2e2481bcc39e244 Maintainer: mowangjuanzi Status: ready -->
<sect1 xml:id="language.operators.increment">
 <title>递增／递减运算符</title>
 <para>
  PHP 支持 C 风格的前／后递增与递减运算符。
 </para>
 <note>
  <simpara>
   递增／递减运算符不影响布尔值。递减
   &null; 值也没有效果，但是递增 &null; 的结果是 <literal>1</literal>。
  </simpara>
 </note>
 <table>
  <title>递增／递减运算符</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>例子</entry>
     <entry>名称</entry>
     <entry>效果</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>++$a</entry>
     <entry>前加</entry>
     <entry><varname>$a</varname> 的值加一，然后返回 <varname>$a</varname>。</entry>
    </row>
    <row>
     <entry>$a++</entry>
     <entry>后加</entry>
     <entry>返回 <varname>$a</varname>，然后将 <varname>$a</varname> 的值加一。</entry>
    </row>
    <row>
     <entry>--$a</entry>
     <entry>前减</entry>
     <entry><varname>$a</varname> 的值减一， 然后返回 <varname>$a</varname>。</entry>
    </row>
    <row>
     <entry>$a--</entry>
     <entry>后减</entry>
     <entry>返回 <varname>$a</varname>，然后将 <varname>$a</varname> 的值减一。</entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  一个简单的示例脚本：
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo "<h3>Postincrement</h3>";
$a = 5;
echo "Should be 5: " . $a++ . "<br />\n";
echo "Should be 6: " . $a . "<br />\n";

echo "<h3>Preincrement</h3>";
$a = 5;
echo "Should be 6: " . ++$a . "<br />\n";
echo "Should be 6: " . $a . "<br />\n";

echo "<h3>Postdecrement</h3>";
$a = 5;
echo "Should be 5: " . $a-- . "<br />\n";
echo "Should be 4: " . $a . "<br />\n";

echo "<h3>Predecrement</h3>";
$a = 5;
echo "Should be 4: " . --$a . "<br />\n";
echo "Should be 4: " . $a . "<br />\n";
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  在处理字符变量的算数运算时，PHP 沿袭了 Perl 的习惯，而非 C 的。例如，在
  Perl 中 <literal>$a = 'Z'; $a++;</literal> 将把 <literal>$a</literal>
  变成<literal>'AA'</literal>，而在 C 中，<literal>a = 'Z'; a++;</literal> 将把
  <literal>a</literal> 变成 <literal>'['</literal>（<literal>'Z'</literal>
  的 ASCII 值是 90，<literal>'['</literal> 的 ASCII 值是
  91）。注意字符变量只能递增，不能递减，并且只支持纯 ASCII 字母数字（a-z、A-Z 和
  0-9）。递增/递减其他字符变量则无效，原字符串没有变化。
  <example>
   <title>涉及字符变量的算数运算</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '== Alphabetic strings ==' . PHP_EOL;
$s = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$s . PHP_EOL;
}
// 字母数字字符串的不同行为
echo '== Alphanumeric strings ==' . PHP_EOL;
$d = 'A8';
for ($n=0; $n<6; $n++) {
  echo ++$d . PHP_EOL;
}
$d = 'A08';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
== Alphabetic strings ==
X
Y
Z
AA
AB
AC
== Alphanumeric strings ==
A9
B0
B1
B2
B3
B4
A09
A10
A11
A12
A13
A14
]]>
   </screen>
  </example>
 </para>
 <para>
  递增或递减布尔值没有效果。
 </para>
</sect1>
