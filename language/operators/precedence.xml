<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 52407313885d27a4e891e08dd2e2481bcc39e244 Maintainer: mowangjuanzi Status: ready -->
<sect1 xml:id="language.operators.precedence">
 <title>运算符优先级</title>
 <para>
  运算符优先级指定了两个表达式绑定得有多“紧密”。例如，表达式 <literal>1 + 5 *
  3</literal> 的结果是 <literal>16</literal> 而不是 <literal>18</literal>
  是因为乘号（“*”）的优先级比加号（“+”）高。必要时可以用括号来强制改变优先级。例如：<literal>(1
  + 5) * 3</literal> 的值为 <literal>18</literal>。
 </para>
 <para>
  如果运算符优先级相同，那运算符的结合方向决定了该如何运算。例如，"-"是左联的，那么 <literal>1 - 2 - 3</literal> 就等同于 <literal>(1 - 2) - 3</literal>
  并且结果是 <literal>-4</literal>. 另外一方面，"="是右联的，所以 <literal>$a = $b = $c</literal> 等同于
  <literal>$a = ($b = $c)</literal>。
 </para>
 <para>
  没有结合的相同优先级的运算符不能连在一起使用，例如
  <literal>1 &lt; 2 &gt; 1</literal> 在PHP是不合法的。但另外一方面表达式
  <literal>1 &lt;= 1 == 1</literal> 是合法的, 因为 <literal>==</literal> 的优先级低于
  <literal>&lt;=</literal>。
 </para>
 <para>
  关联性仅对二（三）元操作符有意义。
  一元操作符是前缀或者后缀，所以不适用该概念。
  例如 <literal>!!$a</literal> 仅可分为 <literal>!(!$a)</literal>。
 </para>
 <para>
  括号的使用，哪怕在不是必要的场合下，通过括号的配对来明确标明运算顺序，而非靠运算符优先级和结合性来决定，通常能够增加代码的可读性。
 </para>
 <para>
  下表按照优先级从高到低列出了运算符。同一行中的运算符具有相同优先级，此时它们的结合方向决定求值顺序。
  <table>
   <title>运算符优先级</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>结合方向</entry>
      <entry>运算符</entry>
      <entry>附加信息</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>不适用</entry>
      <entry>
       <literal>clone</literal>
       <literal>new</literal>
      </entry>
      <entry><link linkend="language.oop5.cloning">clone</link> 和 <link linkend="language.oop5.basic.new">new</link></entry>
     </row>
     <row>
      <entry>右</entry>
      <entry><literal>**</literal></entry>
      <entry><link linkend="language.operators.arithmetic">算术运算符</link></entry>
     </row>
     <row>
      <entry>不适用</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>++</literal>
       <literal>--</literal>
       <literal>~</literal>
       <literal>(int)</literal>
       <literal>(float)</literal>
       <literal>(string)</literal>
       <literal>(array)</literal>
       <literal>(object)</literal>
       <literal>(bool)</literal>
       <literal>@</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">算术</link> (一元 <literal>+</literal> 和 <literal>-</literal>)，
       <link linkend="language.operators.increment">递增/递减</link>，
       <link linkend="language.operators.bitwise">按位</link>，
       <link linkend="language.types.typecasting">类型转换</link>&listendand;
       <link linkend="language.operators.errorcontrol">错误控制</link>
      </entry>
     </row>
     <row>
      <entry>左</entry>
      <entry><literal>instanceof</literal></entry>
      <entry>
       <link linkend="language.operators.type">类型</link>
      </entry>
     </row>
     <row>
      <entry>不适用</entry>
      <entry><literal>!</literal></entry>
      <entry>
       <link linkend="language.operators.logical">逻辑运算符</link>
      </entry>
     </row>
     <row>
      <entry>左</entry>
      <entry>
       <literal>*</literal>
       <literal>/</literal>
       <literal>%</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">算术运算符</link>
      </entry>
     </row>
     <row>
      <entry>左</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>.</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">算数</link> (二元 <literal>+</literal> 和 <literal>-</literal>)，
       <link linkend="language.operators.array">array</link>&listendand;
       <link linkend="language.operators.string">string</link> （<literal>.</literal> PHP 8.0.0 前可用）
      </entry>
     </row>
     <row>
      <entry>左</entry>
      <entry>
       <literal>&lt;&lt;</literal>
       <literal>&gt;&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">位运算符</link>
      </entry>
     </row>
     <row>
      <entry>左</entry>
      <entry><literal>.</literal></entry>
      <entry>
       <link linkend="language.operators.string">string</link> （PHP 8.0.0 起可用）
      </entry>
     </row>
     <row>
      <entry>无</entry>
      <entry>
       <literal>&lt;</literal>
       <literal>&lt;=</literal>
       <literal>&gt;</literal>
       <literal>&gt;=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">比较运算符</link>
      </entry>
     </row>
     <row>
      <entry>无</entry>
      <entry>
       <literal>==</literal>
       <literal>!=</literal>
       <literal>===</literal>
       <literal>!==</literal>
       <literal>&lt;&gt;</literal>
       <literal>&lt;=&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">比较运算符</link>
      </entry>
     </row>
     <row>
      <entry>左</entry>
      <entry><literal>&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">位运算符</link>&listendand;<link
       linkend="language.references">引用</link></entry>
     </row>
     <row>
      <entry>左</entry>
      <entry><literal>^</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">位运算符</link>
      </entry>
     </row>
     <row>
      <entry>左</entry>
      <entry><literal>|</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">位运算符</link>
      </entry>
     </row>
     <row>
      <entry>左</entry>
      <entry><literal>&amp;&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.logical">逻辑运算符</link>
      </entry>
     </row>
     <row>
      <entry>左</entry>
      <entry><literal>||</literal></entry>
      <entry>
       <link linkend="language.operators.logical">逻辑运算符</link>
      </entry>
     </row>
     <row>
      <entry>右</entry>
      <entry><literal>??</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.coalesce">null 合并运算符</link>
      </entry>
     </row>
     <row>
      <entry>无关联</entry>
      <entry><literal>? :</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.ternary">三元运算符</link>
       (PHP 8.0.0 之前左联)
      </entry>
     </row>
     <row>
      <entry>右</entry>
      <entry>
       <literal>=</literal>
       <literal>+=</literal>
       <literal>-=</literal>
       <literal>*=</literal>
       <literal>**=</literal>
       <literal>/=</literal>
       <literal>.=</literal>
       <literal>%=</literal>
       <literal>&amp;=</literal>
       <literal>|=</literal>
       <literal>^=</literal>
       <literal>&lt;&lt;=</literal>
       <literal>&gt;&gt;=</literal>
       <literal>??=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.assignment">赋值运算符</link>
      </entry>
     </row>
     <row>
      <entry>不适用</entry>
      <entry><literal>yield from</literal></entry>
      <entry>
       <link linkend="control-structures.yield.from">yield from</link>
      </entry>
     </row>
     <row>
      <entry>不适用</entry>
      <entry><literal>yield</literal></entry>
      <entry>
       <link linkend="control-structures.yield">yield</link>
      </entry>
     </row>
     <row>
      <entry>不适用</entry>
      <entry><literal>print</literal></entry>
      <entry><function>print</function></entry>
     </row>
     <row>
      <entry>左</entry>
      <entry><literal>and</literal></entry>
      <entry>
       <link linkend="language.operators.logical">逻辑运算符</link>
      </entry>
     </row>
     <row>
      <entry>左</entry>
      <entry><literal>xor</literal></entry>
      <entry>
       <link linkend="language.operators.logical">逻辑运算符</link>
      </entry>
     </row>
     <row>
      <entry>左</entry>
      <entry><literal>or</literal></entry>
      <entry>
       <link linkend="language.operators.logical">逻辑运算符</link>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  <example>
   <title>结合方向</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
// PHP 的三元操作符跟 C/C++ 有区别
$a = true ? 0 : true ? 1 : 2; // (true ? 0 : true) ? 1 : 2 = 2 (PHP 8.0.0 前可用)

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  运算符优先级和关联方式仅决定表达式如何分组，不指定计算顺序。
  一般情况下， PHP 不指定表达式的计算顺序，并且代码避免指定假设执行顺序，
  因为行为会在 PHP 版本间发生变化或者依赖于旁边的代码。
  <example>
   <title>未定义执行顺序</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1;
echo $a + $a++; // 可能会输出 2 或 3

$i = 1;
$array[$i] = $i++; // 可能会设置索引 1 或 2
?>
]]>
   </programlisting>
  </example>
  <example>
   <title><literal>+</literal>、<literal>-</literal> 、<literal>.</literal> 具有相同的优先级</title>
   <programlisting role="php">
<![CDATA[
<?php
$x = 4;
// 这行可能会导致不可预料的输出：
echo "x minus one equals " . $x-1 . ", or so I hope\n";
// 因为它是这样计算的：（PHP 8.0.0 之前版本）
echo (("x minus one equals " . $x) - 1) . ", or so I hope\n";
// 可以使用括号来强制指定优先级：
echo "x minus one equals " . ($x-1) . ", or so I hope\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
-1, or so I hope
-1, or so I hope
x minus one equals 3, or so I hope
]]>
   </screen>
  </example>
 </para>
 <note>
  <para>
   尽管 <literal>=</literal> 比其它大多数的运算符的优先级低，PHP
   仍旧允许类似如下的表达式：<literal>if (!$a = foo())</literal>，在此例中
   <literal>foo()</literal> 的返回值被赋给了 <varname>$a</varname>。
  </para>
 </note>
 <sect2 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       现在，字符串连接符（<literal>.</literal>）的优先级比算数加/减（<literal>+</literal> 和 
       <literal>-</literal>）、按位左/右移（<literal>&lt;&lt;</literal> 和 
       <literal>&gt;&gt;</literal>）更低。在此之前，它的优先级与 <literal>+</literal>、
       <literal>-</literal> 相同，并且比 <literal>&lt;&lt;</literal>、 
       <literal>&gt;&gt;</literal> 更高。
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       三元运算符（<literal>? :</literal>）是现在是非关联的；以前它是左联的。
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       已弃用在无括号的表达式中依赖字符串连接（<literal>.</literal>）相对于算数加/减（<literal>+</literal> 或者
        <literal>-</literal>）或者按位左/右移（<literal>&lt;&lt;</literal> 或者 
        <literal>&gt;&gt;</literal>）的优先级的使用方法。
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       不推荐使用三元运算符（<literal>? :</literal>）的左联。
       即已弃用嵌套多个未带括号的三元运算符。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>
</sect1>