<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 43d07782b514d0c7a8487f2c74063739f302df8d Maintainer: mowangjuanzi Status: ready -->
<sect1 xml:id="language.operators.type">
 <title>类型运算符</title>
 <titleabbrev>类型</titleabbrev>
 <para>
  <literal>instanceof</literal> 用于确定一个 PHP 变量是否属于某一类
  <link linkend="language.oop5.basic.class">class</link> 的实例：
  <example>
   <title>对类使用 <literal>instanceof</literal></title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

class NotMyClass
{
}
$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof NotMyClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  <literal>instanceof</literal>　也可用来确定一个变量是不是继承自某一父类的子类的实例：
  <example>
   <title>对继承类使用 <literal>instanceof</literal></title>
   <programlisting role="php">
<![CDATA[
<?php
class ParentClass
{
}

class MyClass extends ParentClass
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof ParentClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  检查一个对象是否<emphasis>不是</emphasis>某个类的实例，可以使用<link
  linkend="language.operators.logical">逻辑运算符 <literal>not</literal></link>。
  <example>
   <title>使用 <literal>instanceof</literal> 检查对象<emphasis>不是</emphasis>某个类的实例</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

$a = new MyClass;
var_dump(!($a instanceof stdClass));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  最后，<literal>instanceof</literal>也可用于确定一个变量是不是实现了某个<link
  linkend="language.oop5.interfaces">接口</link>的对象的实例:
  <example>
   <title>对接口使用 <literal>instanceof</literal></title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof MyInterface);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  虽然 <literal>instanceof</literal> 通常直接与类名一起使用，但也可以使用对象或字符串变量：
  <example>
   <title>对其它变量使用 <literal>instanceof</literal></title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;
$b = new MyClass;
$c = 'MyClass';
$d = 'NotMyClass';

var_dump($a instanceof $b); // $b 是 MyClass 类的对象
var_dump($a instanceof $c); // $c 是字符串 'MyClass'
var_dump($a instanceof $d); // $d 是字符串 'NotMyClass'
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  如果被检测的变量不是对象，instanceof 并不发出任何错误信息而是返回
  &false;。PHP 7.3.0 之前不允许用于检测常量。
  <example>
   <title>用 <literal>instanceof</literal> 检测其它变量</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = NULL;
$c = imagecreate(5, 5);
var_dump($a instanceof stdClass); // $a 是整数
var_dump($b instanceof stdClass); // $b 是 NULL
var_dump($c instanceof stdClass); // $c 是资源
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(false)
bool(false)
bool(false)
PHP Fatal error:  instanceof expects an object instance, constant given
]]>
   </screen>
  </example>
 </para><para>
  PHP 7.3.0 起，
  <literal>instanceof</literal> 操作符的左侧可以放常量。
  <example>
   <title>使用 <literal>instanceof</literal> 测试常量</title>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs.73;
   <screen>
<![CDATA[
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  PHP 8.0.0 起， <literal>instanceof</literal> 可以与任何表达式一起使用。表达式必须使用括号括起来并且生成
  <type>string</type>。
  <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
  <example>
   <title>将 <literal>instanceof</literal> 与任意表达式一起使用</title>
   <programlisting role="php">
<![CDATA[
<?php

class ClassA extends \stdClass {}
class ClassB extends \stdClass {}
class ClassC extends ClassB {}
class ClassD extends ClassA {}

function getSomeClass(): string
{
    return ClassA::class;
}

var_dump(new ClassA instanceof ('std' . 'Class'));
var_dump(new ClassB instanceof ('Class' . 'B'));
var_dump(new ClassC instanceof ('Class' . 'A'));
var_dump(new ClassD instanceof (getSomeClass()));
?>
]]>
   </programlisting>
   &example.outputs.8;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <simpara>
  <literal>instanceof</literal> 在功能上有个
  类似的变体 <function>is_a</function>。
 </simpara>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_class</function></member>
    <member><function>is_a</function></member>
   </simplelist>
  </para>
 </sect2>
</sect1>
